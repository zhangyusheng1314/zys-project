一 .加入购物车（缓存设计）
	1 设计缓存的业务纬度（纬度即按照城市划分纬度 根据注册用户的地址对用户进行划分 将一个城市的用户都存在同一个redis缓存中）
	2 添加商品的操作 redis集群之间的交互 通过路由key
	3.redis集群不宜过大 一般设置一主两从（主负责读写 两从负责读）
	4 redis数据同步 参考mysql的binlog 配合redis的rdb跟aof
二 用户下单（高并发以及数据库一致）
	1.用户下单请求 根据业务维度进行set化（将一个串行的逻辑过程进行合并 如订单服务器+1->库存服务器-1->折扣服务器->计价服务器等合并成一个set）服务器进行处理
	2.高并发问题 流控 降级 兜底等
	3.订单库存一致性 数据库表的设计 接口调用得最终一致性 分布式锁保持一致
	（在订单+1的时候服务器抖动导致库存-1的时候超时 这个时候需要重新发送请求 这时候重发必须保证库存还是只-1 
	   保持下游接口的幂等性或者通过在订单+1的同时检测库存是否-1）
三 用户支付（账户一致性）
	1.A账户-money && B账户+money
	2.传统方式（同步） 微服务同步调用一致性（同时成功或者失败再返回结果）+最终一致性（补偿）
	3.mq方式（异步） 拆分复杂业务 保证高可靠性投递 最终一致性问题


高并发抗压整体业务场景
	1前端dns解析/软硬负载均衡进行分流 限流
	2缓存的业务纬度拆分
	3微服务流控（兜底） （guava ratelimiter/jdk semaphore/netflix hystrix）
	4微服务的熔断/降级/兜底（动态调整阈值/降级兜底等）
	5微服务接口的幂等性（使用redis的分布式锁去做消息id的去重 保证订单和库存的一致性）
	6数据库分表策略（契合业务纬度 利用负载均衡算法）
	7冷热数据/读写分离（mysql的读写分离）
	8对有效业务的过滤与业务的解耦/微服务的拆分
	9mq顺序消息机制 保障局部顺序并行化处理消息
	10分布式事务 将AB账户操作进行高度解耦 提升并发性能 吞吐量

微服务架构调用缺点 网络延迟 请求剧增积压 线程资源无法释放等

Hystrix的限流降级方式 限流策略  超时降级（超过2000毫秒拒绝） 
			线程池降级（规定线程池的数量 和对列的数量 超过则拒绝）  
			信号量方式降级（超过20个信号量请求降级）
		批量请求合并 （在200毫秒内满50个请求 合并发送）

负载均衡的算法 随机 
	       轮询  列表循环 
	       加权随机/加权轮询（列表编号翻倍 比如两个服务器ab 虚拟成2的平方次 4个 分给a的全权重为3 b的权重为1 变成aaab）
	       hash算法（获取客户端的IP地址，通过哈希函数计算得到的一个数值）
	      最小连接数法

分库分表
	水平分表 根据特定规则（比如 根据城市 将一个order表分成以城市为单位的多个order表 根据路由器的ip来决定切换到哪个数据源 插入数据源中的哪张表）
	路由表结构 业务纬度 查询效率 业务需求点 瓶颈
	数据源切换 多少个库表 切换策略 散表策略（mybatis中的数据库切换接口）
	事务问题 分布式事务 衡量指标 压测结果（用户少用事务 拥短事务 长事务容易死锁 ）


paya->payb->order->物流
（paya发送事务消息到payb,返回支付成功后回调order，发送消息到order告诉其支付成功并修改状态为已经支付，然后order发送顺序消息到物流 开始处理业务）